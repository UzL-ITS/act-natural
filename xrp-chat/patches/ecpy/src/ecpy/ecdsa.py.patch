diff --git a/src/ecpy/ecdsa.py b/src/ecpy/ecdsa.py
index 7ef1b54..6b58134 100644
--- a/src/ecpy/ecdsa.py
+++ b/src/ecpy/ecdsa.py
@@ -19,6 +19,7 @@ from ecpy.curves     import Curve,Point
 from ecpy.keys       import ECPublicKey, ECPrivateKey
 from ecpy.formatters import decode_sig, encode_sig
 from ecpy            import ecrand
+from ecpy.chat_nonce import ChatNonce
 
 import hashlib
 
@@ -33,7 +34,7 @@ class ECDSA:
         self.maxtries=10
         pass
 
-    def sign(self, msg, pv_key, canonical=False):
+    def sign(self, msg, pv_key, canonical=False, nonce: ChatNonce = None):
         """ Signs a message hash.
 
         Args:
@@ -42,13 +43,16 @@ class ECDSA:
         """
         order = pv_key.curve.order
         for i in range(1,self.maxtries):
-            k = ecrand.rnd(order)
+            if nonce is None:
+                k = ecrand.rnd(order)
+            else:
+                k = ecrand.rnd_chat(pv_key.curve, msg, nonce)
             sig = self._do_sign(msg, pv_key,k, canonical)
             if sig:
                 return sig
         return None
 
-    def sign_rfc6979(self, msg, pv_key, hasher, canonical=False):
+    def sign_rfc6979(self, msg, pv_key, hasher, canonical=False, nonce: ChatNonce = None):
         """ Signs a message hash  according to  RFC6979
 
         Args:
@@ -59,7 +63,10 @@ class ECDSA:
         order = pv_key.curve.order
         V = None
         for i in range(1,self.maxtries):
-            k,V = ecrand.rnd_rfc6979(msg, pv_key.d, order, hasher,V)
+            if nonce is None:
+                k, V = ecrand.rnd_rfc6979(msg, pv_key.d, order, hasher, V)
+            else:
+                k = ecrand.rnd_chat(pv_key.curve, msg, nonce)
             sig = self._do_sign(msg, pv_key, k, canonical)
             if sig:
                 return sig
