diff --git a/src/modules/aesni/tests_impl.h b/src/modules/aesni/tests_impl.h
new file mode 100644
index 0000000..4d6e13f
--- /dev/null
+++ b/src/modules/aesni/tests_impl.h
@@ -0,0 +1,127 @@
+#ifndef SECP256K1_MODULE_AESNI_TESTS_H
+#define SECP256K1_MODULE_AESNI_TESTS_H
+
+typedef struct {
+    unsigned char userkey[32];
+    unsigned char enckey[15*16];
+    unsigned char deckey[15*16];
+    unsigned char iv[16];
+    unsigned char pt[16];
+    unsigned char ecb_ct[16];
+    unsigned char cbc_ct[16];
+} bench_aesni_data_t;
+
+void test_aesni_setup(bench_aesni_data_t *data) {
+    long unsigned int i;
+    unsigned char arr1[16] = {
+        0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89
+    };
+    unsigned char arr2[16] = {
+        0x0e, 0x23, 0x92, 0xdd, 0x6f, 0x69, 0x0b, 0x44, 0xa5, 0xa1, 0xb4, 0xfd, 0xff, 0x3b, 0x7f, 0x83
+    };
+    unsigned char arr3[15*16] = {
+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+        0xa5, 0x73, 0xc2, 0x9f, 0xa1, 0x76, 0xc4, 0x98, 0xa9, 0x7f, 0xce, 0x93, 0xa5, 0x72, 0xc0, 0x9c,
+        0x16, 0x51, 0xa8, 0xcd, 0x02, 0x44, 0xbe, 0xda, 0x1a, 0x5d, 0xa4, 0xc1, 0x06, 0x40, 0xba, 0xde,
+        0xae, 0x87, 0xdf, 0xf0, 0x0f, 0xf1, 0x1b, 0x68, 0xa6, 0x8e, 0xd5, 0xfb, 0x03, 0xfc, 0x15, 0x67,
+        0x6d, 0xe1, 0xf1, 0x48, 0x6f, 0xa5, 0x4f, 0x92, 0x75, 0xf8, 0xeb, 0x53, 0x73, 0xb8, 0x51, 0x8d,
+        0xc6, 0x56, 0x82, 0x7f, 0xc9, 0xa7, 0x99, 0x17, 0x6f, 0x29, 0x4c, 0xec, 0x6c, 0xd5, 0x59, 0x8b,
+        0x3d, 0xe2, 0x3a, 0x75, 0x52, 0x47, 0x75, 0xe7, 0x27, 0xbf, 0x9e, 0xb4, 0x54, 0x07, 0xcf, 0x39,
+        0x0b, 0xdc, 0x90, 0x5f, 0xc2, 0x7b, 0x09, 0x48, 0xad, 0x52, 0x45, 0xa4, 0xc1, 0x87, 0x1c, 0x2f,
+        0x45, 0xf5, 0xa6, 0x60, 0x17, 0xb2, 0xd3, 0x87, 0x30, 0x0d, 0x4d, 0x33, 0x64, 0x0a, 0x82, 0x0a,
+        0x7c, 0xcf, 0xf7, 0x1c, 0xbe, 0xb4, 0xfe, 0x54, 0x13, 0xe6, 0xbb, 0xf0, 0xd2, 0x61, 0xa7, 0xdf,
+        0xf0, 0x1a, 0xfa, 0xfe, 0xe7, 0xa8, 0x29, 0x79, 0xd7, 0xa5, 0x64, 0x4a, 0xb3, 0xaf, 0xe6, 0x40,
+        0x25, 0x41, 0xfe, 0x71, 0x9b, 0xf5, 0x00, 0x25, 0x88, 0x13, 0xbb, 0xd5, 0x5a, 0x72, 0x1c, 0x0a,
+        0x4e, 0x5a, 0x66, 0x99, 0xa9, 0xf2, 0x4f, 0xe0, 0x7e, 0x57, 0x2b, 0xaa, 0xcd, 0xf8, 0xcd, 0xea,
+        0x24, 0xfc, 0x79, 0xcc, 0xbf, 0x09, 0x79, 0xe9, 0x37, 0x1a, 0xc2, 0x3c, 0x6d, 0x68, 0xde, 0x36
+    };
+    unsigned char arr4[15*16] = {
+        0x24, 0xfc, 0x79, 0xcc, 0xbf, 0x09, 0x79, 0xe9, 0x37, 0x1a, 0xc2, 0x3c, 0x6d, 0x68, 0xde, 0x36,
+        0x34, 0xf1, 0xd1, 0xff, 0xbf, 0xce, 0xaa, 0x2f, 0xfc, 0xe9, 0xe2, 0x5f, 0x25, 0x58, 0x01, 0x6e,
+        0x5e, 0x16, 0x48, 0xeb, 0x38, 0x4c, 0x35, 0x0a, 0x75, 0x71, 0xb7, 0x46, 0xdc, 0x80, 0xe6, 0x84,
+        0xc8, 0xa3, 0x05, 0x80, 0x8b, 0x3f, 0x7b, 0xd0, 0x43, 0x27, 0x48, 0x70, 0xd9, 0xb1, 0xe3, 0x31,
+        0xb5, 0x70, 0x8e, 0x13, 0x66, 0x5a, 0x7d, 0xe1, 0x4d, 0x3d, 0x82, 0x4c, 0xa9, 0xf1, 0x51, 0xc2,
+        0x74, 0xda, 0x7b, 0xa3, 0x43, 0x9c, 0x7e, 0x50, 0xc8, 0x18, 0x33, 0xa0, 0x9a, 0x96, 0xab, 0x41,
+        0x3c, 0xa6, 0x97, 0x15, 0xd3, 0x2a, 0xf3, 0xf2, 0x2b, 0x67, 0xff, 0xad, 0xe4, 0xcc, 0xd3, 0x8e,
+        0xf8, 0x5f, 0xc4, 0xf3, 0x37, 0x46, 0x05, 0xf3, 0x8b, 0x84, 0x4d, 0xf0, 0x52, 0x8e, 0x98, 0xe1,
+        0xde, 0x69, 0x40, 0x9a, 0xef, 0x8c, 0x64, 0xe7, 0xf8, 0x4d, 0x0c, 0x5f, 0xcf, 0xab, 0x2c, 0x23,
+        0xae, 0xd5, 0x58, 0x16, 0xcf, 0x19, 0xc1, 0x00, 0xbc, 0xc2, 0x48, 0x03, 0xd9, 0x0a, 0xd5, 0x11,
+        0x15, 0xc6, 0x68, 0xbd, 0x31, 0xe5, 0x24, 0x7d, 0x17, 0xc1, 0x68, 0xb8, 0x37, 0xe6, 0x20, 0x7c,
+        0x7f, 0xd7, 0x85, 0x0f, 0x61, 0xcc, 0x99, 0x16, 0x73, 0xdb, 0x89, 0x03, 0x65, 0xc8, 0x9d, 0x12,
+        0x2a, 0x28, 0x40, 0xc9, 0x24, 0x23, 0x4c, 0xc0, 0x26, 0x24, 0x4c, 0xc5, 0x20, 0x27, 0x48, 0xc4,
+        0x1a, 0x1f, 0x18, 0x1d, 0x1e, 0x1b, 0x1c, 0x19, 0x12, 0x17, 0x10, 0x15, 0x16, 0x13, 0x14, 0x11,
+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
+    };
+    for (i = 0; i < sizeof(arr2); ++i) {
+        data->enckey[i] = arr3[i];
+        data->deckey[i] = arr4[i];
+        if (i < 32) {
+            data->userkey[i] = i;
+            if (i < 16) {
+                data->pt[i] = (i << 4) + i;
+                data->ecb_ct[i] = arr1[i];
+                data->cbc_ct[i] = arr2[i];
+                data->iv[i] = i + 16;
+            }
+        }
+    }
+}
+
+void test_aesni_key_schedule(void) {
+    unsigned char enckey[15*16];
+    unsigned char deckey[15*16];
+    bench_aesni_data_t data;
+    test_aesni_setup(&data);
+
+    secp256k1_aesni_256_key_expansion(enckey, data.userkey);
+    secp256k1_aesni_256_dec_key_expansion(deckey, data.enckey);
+    CHECK(secp256k1_memcmp_var(enckey, data.enckey, 15*16) == 0);
+    CHECK(secp256k1_memcmp_var(deckey, data.deckey, 15*16) == 0);
+}
+
+void test_aesni_ecb_encryption(void) {
+    unsigned char ct[16];
+    bench_aesni_data_t data;
+    test_aesni_setup(&data);
+
+    secp256k1_aesni_ecb_encrypt(ct, data.pt, 16, data.enckey, 14);
+    CHECK(secp256k1_memcmp_var(ct, data.ecb_ct, 16) == 0);
+}
+
+void test_aesni_cbc_encryption(void) {
+    unsigned char ct[16];
+    bench_aesni_data_t data;
+    test_aesni_setup(&data);
+
+    secp256k1_aesni_cbc_encrypt(ct, data.pt, data.iv, 16, data.enckey, 14);
+    CHECK(secp256k1_memcmp_var(ct, data.cbc_ct, 16) == 0);
+}
+
+void test_aesni_ecb_decryption(void) {
+    unsigned char pt[16];
+    bench_aesni_data_t data;
+    test_aesni_setup(&data);
+
+    secp256k1_aesni_ecb_decrypt(pt, data.ecb_ct, 16, data.deckey, 14);
+    CHECK(secp256k1_memcmp_var(pt, data.pt, 16) == 0);
+}
+
+void test_aesni_cbc_decryption(void) {
+    unsigned char pt[16];
+    bench_aesni_data_t data;
+    test_aesni_setup(&data);
+
+    secp256k1_aesni_ecb_decrypt(pt, data.cbc_ct, 16, data.deckey, 14);
+    CHECK(secp256k1_memcmp_var(pt, data.pt, 16) == 0);
+}
+
+void run_aesni_tests(void) {
+    test_aesni_key_schedule();
+    test_aesni_ecb_encryption();
+    test_aesni_cbc_encryption();
+    test_aesni_ecb_decryption();
+    test_aesni_cbc_decryption();
+}
+
+#endif /* SECP256K1_MODULE_AESNI_TESTS_H */
