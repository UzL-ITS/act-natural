diff --git a/src/bench_ecdsa_sign.c b/src/bench_ecdsa_sign.c
new file mode 100644
index 0000000..9de3d4f
--- /dev/null
+++ b/src/bench_ecdsa_sign.c
@@ -0,0 +1,86 @@
+#include <string.h>
+
+#include "include/secp256k1.h"
+#include "util.h"
+#include "bench.h"
+
+typedef struct {
+    secp256k1_context *ctx;
+    unsigned char msg32[32];
+    unsigned char key32[32];
+    secp256k1_chat_data *chat;
+} bench_ecdsa_sign_data_t;
+
+static void bench_ecdsa_sign_setup(void *arg) {
+    unsigned int i;
+    bench_ecdsa_sign_data_t *bench_data;
+    unsigned char pk[33] = {
+        0x02,
+        0x79, 0xbe, 0x66, 0x7e, 0xf9, 0xdc, 0xbb, 0xac,
+        0x55, 0xa0, 0x62, 0x95, 0xce, 0x87, 0x0b, 0x07,
+        0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xce, 0x28, 0xd9,
+        0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8, 0x17, 0x98
+    };
+
+    bench_data = (bench_ecdsa_sign_data_t *)arg;
+    bench_data->ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN);
+    bench_data->chat = calloc(1, sizeof(secp256k1_chat_data));
+    bench_data->chat->msg_chat = calloc(32, sizeof(unsigned char));
+    bench_data->chat->pk_B = calloc(33, sizeof(unsigned char));
+    bench_data->chat->sk_A = calloc(32, sizeof(unsigned char));
+    bench_data->chat->vk_A = calloc(33, sizeof(unsigned char));
+    for (i = 0; i < 32; ++i) {
+        bench_data->msg32[i] = i;
+        bench_data->key32[i] = i;
+        bench_data->chat->msg_chat[i] = i;
+        bench_data->chat->pk_B[i] = pk[i];
+        bench_data->chat->sk_A[i] = pk[i+1];
+        bench_data->chat->vk_A[i] = pk[i];
+    }
+    bench_data->chat->pk_B[32] = pk[32];
+    bench_data->chat->vk_A[32] = pk[32];
+}
+
+static void bench_ecdsa_sign_cleanup(void *arg, int iters) {
+    bench_ecdsa_sign_data_t *bench_data;
+    (void)iters;
+    bench_data = (bench_ecdsa_sign_data_t *)arg;
+    secp256k1_context_destroy(bench_data->ctx);
+    free(bench_data->chat->vk_A);
+    free(bench_data->chat->sk_A);
+    free(bench_data->chat->pk_B);
+    free(bench_data->chat->msg_chat);
+    free(bench_data->chat);
+}
+
+static void bench_ecdsa_sign_rfc6979(void *arg, int iters) {
+    int i;
+    secp256k1_ecdsa_signature sig;
+    bench_ecdsa_sign_data_t *data;
+    data = (bench_ecdsa_sign_data_t *)arg;
+    for (i = 0; i < iters; ++i) {
+        CHECK(secp256k1_ecdsa_sign(data->ctx, &sig, data->msg32, data->key32, secp256k1_nonce_function_rfc6979, NULL) == 1);
+    }
+}
+
+static void bench_ecdsa_sign_chat(void *arg, int iters) {
+    int i;
+    secp256k1_ecdsa_signature sig;
+    bench_ecdsa_sign_data_t *data;
+    data = (bench_ecdsa_sign_data_t *)arg;
+    for (i = 0; i < iters; ++i) {
+        CHECK(secp256k1_ecdsa_sign(data->ctx, &sig, data->msg32, data->key32, secp256k1_nonce_function_chat, data->chat) == 1);
+    }
+}
+
+int main(void) {
+    bench_ecdsa_sign_data_t data;
+    int iters;
+
+    iters = get_iters(20000);
+    run_benchmark("sign-ecdsa-w-rfc6979", bench_ecdsa_sign_rfc6979, bench_ecdsa_sign_setup, bench_ecdsa_sign_cleanup, &data, 10, iters);
+
+    run_benchmark("sign-chat", bench_ecdsa_sign_chat, bench_ecdsa_sign_setup, bench_ecdsa_sign_cleanup, &data, 10, iters);
+
+    return 0;
+}
